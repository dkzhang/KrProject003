// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganQueryClient is the client API for OrganQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganQueryClient interface {
	// Sends a greeting
	GetUser(ctx context.Context, in *GetOrganRequest, opts ...grpc.CallOption) (*GetOrganReply, error)
}

type organQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganQueryClient(cc grpc.ClientConnInterface) OrganQueryClient {
	return &organQueryClient{cc}
}

func (c *organQueryClient) GetUser(ctx context.Context, in *GetOrganRequest, opts ...grpc.CallOption) (*GetOrganReply, error) {
	out := new(GetOrganReply)
	err := c.cc.Invoke(ctx, "/userApi.v1.OrganQuery/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganQueryServer is the server API for OrganQuery service.
// All implementations must embed UnimplementedOrganQueryServer
// for forward compatibility
type OrganQueryServer interface {
	// Sends a greeting
	GetUser(context.Context, *GetOrganRequest) (*GetOrganReply, error)
	mustEmbedUnimplementedOrganQueryServer()
}

// UnimplementedOrganQueryServer must be embedded to have forward compatible implementations.
type UnimplementedOrganQueryServer struct {
}

func (UnimplementedOrganQueryServer) GetUser(context.Context, *GetOrganRequest) (*GetOrganReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedOrganQueryServer) mustEmbedUnimplementedOrganQueryServer() {}

// UnsafeOrganQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganQueryServer will
// result in compilation errors.
type UnsafeOrganQueryServer interface {
	mustEmbedUnimplementedOrganQueryServer()
}

func RegisterOrganQueryServer(s grpc.ServiceRegistrar, srv OrganQueryServer) {
	s.RegisterService(&OrganQuery_ServiceDesc, srv)
}

func _OrganQuery_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganQueryServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userApi.v1.OrganQuery/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganQueryServer).GetUser(ctx, req.(*GetOrganRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganQuery_ServiceDesc is the grpc.ServiceDesc for OrganQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userApi.v1.OrganQuery",
	HandlerType: (*OrganQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _OrganQuery_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/userApi/v1/organApi.proto",
}
